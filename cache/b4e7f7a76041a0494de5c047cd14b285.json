{"expires":1743603300.746,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class Space3D : public BaseEnv</span></div><div class='line'><span style=\"color: #A6ACCD;\">{</span></div><div class='line'><span style=\"color: #A6ACCD;\">private:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double tau; // 每次积分的时间长度，tau = dt / integrate_steps</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double dt; // 每次被调用 step() 方法时，步进的时间长度</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double eps; // 容差，可以用于检查动力学积分的精度，未实装</span></div><div class='line'><span style=\"color: #A6ACCD;\">    int integrate_steps; // 每次被调用 step() 方法时，调用环境内对象的 step() 方法的次数（将每次步进划分为几次积分）</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">public:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::vector&lt;std::shared_ptr&lt;Object3D&gt;&gt; objects;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    Space3D(double tau, double eps, int integrate_steps)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        : tau(tau), eps(eps), integrate_steps(integrate_steps)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        dt = tau / integrate_steps;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::object reset()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        for (auto&amp; object : objects)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            object-&gt;reset();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    void add_object(std::shared_ptr&lt;Object3D&gt; object)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        objects.push_back(object); // 将传入的对象(Object3D及其子类)存入列表中</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    bool check_consistency()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return true;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::dict to_dict() // 调用环境中每个对象的 to_dict() 方法，并将所有返回值存入一个字典中并返回</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        for (auto&amp; object : objects)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            output_dict[py::str(object-&gt;name)] = object-&gt;to_dict(); </span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::dict get_d() // 获取环境中所有对象的运动学导数，用于 debug</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        for (auto&amp; object : objects)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            output_dict[py::str(object-&gt;name)] = (object-&gt;d()).to_dict(); </span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::object step(const py::object&amp; actions) // 步进时会调用环境中所有对象的 step() 方法若干次，并获取返回值</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict result, info;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        for (int i = 0; i &lt; integrate_steps; ++i)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            for (auto&amp; object : objects)</span></div><div class='line'><span style=\"color: #A6ACCD;\">            {</span></div><div class='line'><span style=\"color: #A6ACCD;\">                actions[py::str(object-&gt;name)][&quot;dt&quot;] = dt;   </span></div><div class='line'><span style=\"color: #A6ACCD;\">                result[py::str(object-&gt;name)] = object-&gt;step(actions[py::str(object-&gt;name)]);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">};</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
