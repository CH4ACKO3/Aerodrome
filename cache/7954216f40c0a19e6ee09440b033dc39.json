{"expires":1743605056.887,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color:#2f86d2; text-align: right; -webkit-user-select: none; user-select: none;\" class=\"line-number\">1</span><span style=\"color: #002339;\">class Space3D : public BaseEnv\\n{\\nprivate:\\n    double tau; // \\u6bcf\\u6b21\\u79ef\\u5206\\u7684\\u65f6\\u95f4\\u957f\\u5ea6\\uff0ctau = dt / integrate_steps\\n    double dt; // \\u6bcf\\u6b21\\u88ab\\u8c03\\u7528 step() \\u65b9\\u6cd5\\u65f6\\uff0c\\u6b65\\u8fdb\\u7684\\u65f6\\u95f4\\u957f\\u5ea6\\n    double eps; // \\u5bb9\\u5dee\\uff0c\\u53ef\\u4ee5\\u7528\\u4e8e\\u68c0\\u67e5\\u52a8\\u529b\\u5b66\\u79ef\\u5206\\u7684\\u7cbe\\u5ea6\\uff0c\\u672a\\u5b9e\\u88c5\\n    int integrate_steps; // \\u6bcf\\u6b21\\u88ab\\u8c03\\u7528 step() \\u65b9\\u6cd5\\u65f6\\uff0c\\u8c03\\u7528\\u73af\\u5883\\u5185\\u5bf9\\u8c61\\u7684 step() \\u65b9\\u6cd5\\u7684\\u6b21\\u6570\\uff08\\u5c06\\u6bcf\\u6b21\\u6b65\\u8fdb\\u5212\\u5206\\u4e3a\\u51e0\\u6b21\\u79ef\\u5206\\uff09\\n\\npublic:\\n    std::vector&lt;std::shared_ptr&lt;Object3D&gt;&gt; objects;\\n\\n    Space3D(double tau, double eps, int integrate_steps)\\n        : tau(tau), eps(eps), integrate_steps(integrate_steps)\\n    {\\n        dt = tau / integrate_steps;\\n    }\\n\\n    py::object reset()\\n    {\\n        for (auto&amp; object : objects)\\n        {\\n            object-&gt;reset();\\n        }\\n        return to_dict();\\n    }\\n\\n    void add_object(std::shared_ptr&lt;Object3D&gt; object)\\n    {\\n        objects.push_back(object); // \\u5c06\\u4f20\\u5165\\u7684\\u5bf9\\u8c61(Object3D\\u53ca\\u5176\\u5b50\\u7c7b)\\u5b58\\u5165\\u5217\\u8868\\u4e2d\\n    }\\n\\n    bool check_consistency()\\n    {\\n        return true;\\n    }\\n\\n    py::dict to_dict() // \\u8c03\\u7528\\u73af\\u5883\\u4e2d\\u6bcf\\u4e2a\\u5bf9\\u8c61\\u7684 to_dict() \\u65b9\\u6cd5\\uff0c\\u5e76\\u5c06\\u6240\\u6709\\u8fd4\\u56de\\u503c\\u5b58\\u5165\\u4e00\\u4e2a\\u5b57\\u5178\\u4e2d\\u5e76\\u8fd4\\u56de\\n    {\\n        py::dict output_dict;\\n        for (auto&amp; object : objects)\\n        {\\n            output_dict[py::str(object-&gt;name)] = object-&gt;to_dict(); \\n        }\\n        return output_dict;\\n    }\\n\\n    py::dict get_d() // \\u83b7\\u53d6\\u73af\\u5883\\u4e2d\\u6240\\u6709\\u5bf9\\u8c61\\u7684\\u8fd0\\u52a8\\u5b66\\u5bfc\\u6570\\uff0c\\u7528\\u4e8e debug\\n    {\\n        py::dict output_dict;\\n        for (auto&amp; object : objects)\\n        {\\n            output_dict[py::str(object-&gt;name)] = (object-&gt;d()).to_dict(); \\n        }\\n        return output_dict;\\n    }\\n\\n    py::object step(const py::object&amp; actions) // \\u6b65\\u8fdb\\u65f6\\u4f1a\\u8c03\\u7528\\u73af\\u5883\\u4e2d\\u6240\\u6709\\u5bf9\\u8c61\\u7684 step() \\u65b9\\u6cd5\\u82e5\\u5e72\\u6b21\\uff0c\\u5e76\\u83b7\\u53d6\\u8fd4\\u56de\\u503c\\n    {\\n        py::dict result, info;\\n\\n        for (int i = 0; i &lt; integrate_steps; ++i)\\n        {\\n            for (auto&amp; object : objects)\\n            {\\n                actions[py::str(object-&gt;name)][\\&quot;dt\\&quot;] = dt;   \\n                result[py::str(object-&gt;name)] = object-&gt;step(actions[py::str(object-&gt;name)]);\\n            }\\n        }\\n\\n        return result;\\n    }\\n};</span></div>","classes":"torchlight","styles":"background-color: #FFFFFF; --theme-selection-background: #4373c2;"}}
