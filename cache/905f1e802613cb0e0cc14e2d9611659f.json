{"expires":1743603300.766,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class CartPoleEnv : public BaseEnv</span></div><div class='line'><span style=\"color: #A6ACCD;\">{</span></div><div class='line'><span style=\"color: #A6ACCD;\">private:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double gravity = 9.81;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double masscart = 1.0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double masspole = 0.1;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double total_mass = masspole + masscart;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double length = 0.5; // half the pole&#39;s length</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double polemass_length = masspole * length;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double force_mag = 10.0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double tau = 0.02; // seconds between state updates</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::string kinematic_integrator = &quot;euler&quot;;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double theta_threshold_radians = 12 * 2 * 3.1415926 / 360; // angle at which to fail the episode</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double x_threshold = 2.4; // distance at which to fail the episode</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double x = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double theta = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double x_dot = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double theta_dot = 0;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    int time_step = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    int max_steps = 200;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    bool steps_beyond_done = false;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">public:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    CartPoleEnv() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    ~CartPoleEnv() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::object reset() override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        std::random_device rd;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        std::mt19937 gen(rd());</span></div><div class='line'><span style=\"color: #A6ACCD;\">        std::uniform_real_distribution&lt;&gt; dis(-0.05, 0.05);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        x = dis(gen);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        x_dot = dis(gen);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        theta = dis(gen);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        theta_dot = dis(gen);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        time_step = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        steps_beyond_done = false;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;observation&quot;] = py::make_tuple(x, x_dot, theta, theta_dot);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;info&quot;] = &quot;&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::object step(const py::object&amp; input_dict) override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        if (!input_dict.contains(&quot;action&quot;))</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;input_dict does not contain &#39;action&#39;&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        int action;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        try</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            action = input_dict[&quot;action&quot;].cast&lt;int&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        catch (const std::exception &amp;e)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = std::string(&quot;failed to convert action to int: &quot;) + e.what();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        if (action != 0 &amp;&amp; action != 1)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;action must be either 0 or 1&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        double force = action * force_mag;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double costheta = cos(theta);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double sintheta = sin(theta);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        // For the interested reader:</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // https://coneural.org/florian/papers/05_cart_pole.pdf</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double temp = (force + polemass_length * theta_dot * theta_dot * sintheta) / total_mass;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double theta_acc = (gravity * sintheta - costheta * temp) / (length * (4.0 / 3.0 - masspole * costheta * costheta / total_mass));</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double x_acc = temp - polemass_length * theta_acc * costheta / total_mass;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        if (kinematic_integrator == &quot;euler&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            x = x + tau * x_dot;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            x_dot = x_dot + tau * x_acc;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            theta = theta + tau * theta_dot;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            theta_dot = theta_dot + tau * theta_acc;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (kinematic_integrator == &quot;semi-implicit-euler&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            x_dot = x_dot + tau * x_acc;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            x = x + tau * x_dot;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            theta_dot = theta_dot + tau * theta_acc;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            theta = theta + tau * theta_dot;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;unknown kinematic integrator&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        time_step ++;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        bool terminated = ((x &lt; -x_threshold) || (x &gt; x_threshold) || (theta &lt; -theta_threshold_radians) || (theta &gt; theta_threshold_radians));</span></div><div class='line'><span style=\"color: #A6ACCD;\">        bool truncated = (time_step &gt;= max_steps);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        double reward;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        if (!terminated &amp;&amp; !truncated)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            reward = 1.0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (!steps_beyond_done)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            if (terminated)</span></div><div class='line'><span style=\"color: #A6ACCD;\">            {</span></div><div class='line'><span style=\"color: #A6ACCD;\">                reward = 0.0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            }</span></div><div class='line'><span style=\"color: #A6ACCD;\">            else if (truncated)</span></div><div class='line'><span style=\"color: #A6ACCD;\">            {</span></div><div class='line'><span style=\"color: #A6ACCD;\">                reward = 1.0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            }</span></div><div class='line'><span style=\"color: #A6ACCD;\">            steps_beyond_done = true;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            reward = 0.0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;You are calling &#39;step()&#39; even though this environment has already returned terminated = True. &quot;</span></div><div class='line'><span style=\"color: #A6ACCD;\">                              &quot;You should always call &#39;reset()&#39; once you receive &#39;terminated = True&#39; -- any further steps are undefined behavior.&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;observation&quot;] = py::make_tuple(x, x_dot, theta, theta_dot);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;reward&quot;] = reward;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;terminated&quot;] = terminated;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;truncated&quot;] = truncated;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        if (!result.contains(&quot;info&quot;))</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">};</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
