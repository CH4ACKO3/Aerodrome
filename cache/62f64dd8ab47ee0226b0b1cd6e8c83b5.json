{"expires":1743603300.718,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class Object3D {</span></div><div class='line'><span style=\"color: #A6ACCD;\">public:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::string name;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::string integrator;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 位置坐标（地面系）</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::array&lt;double, 3&gt; pos;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 速度向量（地面系）</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::array&lt;double, 3&gt; vel;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 角速度向量（弹体系）</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::array&lt;double, 3&gt; ang_vel;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 转动惯量</span></div><div class='line'><span style=\"color: #A6ACCD;\">    std::array&lt;double, 3&gt; J;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double V; // 速度</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 描述刚体姿态的八个角度</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double theta;    // 俯仰角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double phi;      // 偏航角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double gamma;    // 倾斜角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double theta_v;  // 速度倾角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double phi_v;    // 速度偏角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double alpha;    // 攻角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double beta;     // 侧滑角</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double gamma_v;  // 速度倾斜角</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::dict initial_state;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    Object3D() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    Object3D(py::dict input_dict)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        name = input_dict[&quot;name&quot;].cast&lt;std::string&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        integrator = input_dict[&quot;integrator&quot;].cast&lt;std::string&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        pos = input_dict[&quot;pos&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        vel = input_dict[&quot;vel&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        ang_vel = input_dict[&quot;ang_vel&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        J = input_dict[&quot;J&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // V = input_dict[&quot;V&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        V = sqrt(vel[0] * vel[0] + vel[1] * vel[1] + vel[2] * vel[2]);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        theta = input_dict[&quot;theta&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        phi = input_dict[&quot;phi&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma = input_dict[&quot;gamma&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        theta_v = input_dict[&quot;theta_v&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        phi_v = input_dict[&quot;phi_v&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma_v = input_dict[&quot;gamma_v&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        alpha = input_dict[&quot;alpha&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        beta = input_dict[&quot;beta&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        initial_state = input_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual void reset()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = Object3D(initial_state);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual py::dict to_dict()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;pos&quot;] = pos;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;vel&quot;] = vel;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;ang_vel&quot;] = ang_vel;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;J&quot;] = J;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;V&quot;] = V;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;theta&quot;] = theta;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;phi&quot;] = phi;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;gamma&quot;] = gamma;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;theta_v&quot;] = theta_v;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;phi_v&quot;] = phi_v;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;alpha&quot;] = alpha;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;beta&quot;] = beta;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;gamma_v&quot;] = gamma_v;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;name&quot;] = name;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual py::object step(py::dict action)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double dt = action[&quot;dt&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        pos = action[&quot;pos&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        vel = action[&quot;vel&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        ang_vel = action[&quot;ang_vel&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        J = action[&quot;J&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // V = action[&quot;V&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        V = sqrt(vel[0] * vel[0] + vel[1] * vel[1] + vel[2] * vel[2]);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        theta = action[&quot;theta&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        phi = action[&quot;phi&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma = action[&quot;gamma&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        theta_v = action[&quot;theta_v&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        phi_v = action[&quot;phi_v&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma_v = action[&quot;gamma_v&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        alpha = action[&quot;alpha&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        beta = action[&quot;beta&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        if (integrator == &quot;euler&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + this-&gt;d() * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;midpoint&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + this-&gt;d() * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + k1 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;rk23&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;rk45&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp3 = *this + k3 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k4 = temp3.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        theta_v = atan2(vel[1], sqrt(vel[0] * vel[0] + vel[2] * vel[2]));</span></div><div class='line'><span style=\"color: #A6ACCD;\">        phi_v = atan2(-vel[2], vel[0]);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        V = sqrt(vel[0] * vel[0] + vel[1] * vel[1] + vel[2] * vel[2]);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual Object3D d()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto derivative = *this;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.pos[0] = vel[0];</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.pos[1] = vel[1];</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.pos[2] = vel[2];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.vel[0] = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.vel[1] = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.vel[2] = 0;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.ang_vel[0] = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.ang_vel[1] = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.ang_vel[2] = 0;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.theta = ang_vel[1] * sin(gamma) + ang_vel[2] * cos(gamma);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.phi = (ang_vel[1] * cos(gamma) - ang_vel[2] * sin(gamma)) / cos(theta);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.gamma = ang_vel[0] * - tan(theta) * (ang_vel[1] * cos(gamma) - ang_vel[2] * sin(gamma));</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.theta_v = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.phi_v = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.gamma_v = 0;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.alpha = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        derivative.beta = 0;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return derivative;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    template&lt;typename T, typename P&gt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    friend T operator+(const T&amp; lop, const P&amp; rop)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto result = lop;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        for (int i = 0; i &lt; 3; ++i)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {   </span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.pos[i] = lop.pos[i] + rop.pos[i];</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.vel[i] = lop.vel[i] + rop.vel[i];</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.ang_vel[i] = lop.ang_vel[i] + rop.ang_vel[i];</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }   </span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result.V = lop.V + rop.V;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta = lop.theta + rop.theta;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi = lop.phi + rop.phi;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma = lop.gamma + rop.gamma;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta_v = lop.theta_v + rop.theta_v;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi_v = lop.phi_v + rop.phi_v; </span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.alpha = lop.alpha + rop.alpha;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.beta = lop.beta + rop.beta;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma_v = lop.gamma_v + rop.gamma_v;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    template&lt;typename T, typename P&gt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    friend T operator-(const T&amp; lop, const P&amp; rop)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto result = lop;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        for (int i = 0; i &lt; 3; ++i)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.pos[i] = lop.pos[i] - rop.pos[i];</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.vel[i] = lop.vel[i] - rop.vel[i];</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.ang_vel[i] = lop.ang_vel[i] - rop.ang_vel[i];</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result.V = lop.V - rop.V;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta = lop.theta - rop.theta;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi = lop.phi - rop.phi;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma = lop.gamma - rop.gamma;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta_v = lop.theta_v - rop.theta_v;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi_v = lop.phi_v - rop.phi_v;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.alpha = lop.alpha - rop.alpha;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.beta = lop.beta - rop.beta;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma_v = lop.gamma_v - rop.gamma_v;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    template&lt;typename T&gt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    friend T operator*(const T&amp; lop, const double&amp; rop)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto result = lop;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        for (int i = 0; i &lt; 3; ++i)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.pos[i] = lop.pos[i] * rop; </span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.vel[i] = lop.vel[i] * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.ang_vel[i] = lop.ang_vel[i] * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }   </span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result.V = lop.V * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta = lop.theta * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi = lop.phi * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma = lop.gamma * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta_v = lop.theta_v * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi_v = lop.phi_v * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.alpha = lop.alpha * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.beta = lop.beta * rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma_v = lop.gamma_v * rop;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    template&lt;typename T&gt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    friend T operator/(const T&amp; lop, const double&amp; rop)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto result = lop;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        for (int i = 0; i &lt; 3; ++i)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.pos[i] = lop.pos[i] / rop; </span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.vel[i] = lop.vel[i] / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result.ang_vel[i] = lop.ang_vel[i] / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }   </span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result.V = lop.V / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta = lop.theta / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi = lop.phi / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma = lop.gamma / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.theta_v = lop.theta_v / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.phi_v = lop.phi_v / rop;   </span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.alpha = lop.alpha / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.beta = lop.beta / rop;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result.gamma_v = lop.gamma_v / rop;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">};</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
