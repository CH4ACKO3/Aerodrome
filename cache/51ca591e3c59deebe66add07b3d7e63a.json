{"expires":1743605056.892,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color:#2f86d2; text-align: right; -webkit-user-select: none; user-select: none;\" class=\"line-number\">1</span><span style=\"color: #002339;\">class WingedCone2D_Classic : public WingedCone2D\\n{\\npublic:\\n    // \\u4fef\\u4ef0\\u89d2\\u589e\\u7a33\\u8fc7\\u8f7d\\u9a7e\\u9a76\\u4eea\\u63a7\\u5236\\u53c2\\u6570\\n    double Kiz;   // \\u79ef\\u5206\\u589e\\u76ca\\n    double Kwz;   // \\u89d2\\u901f\\u5ea6\\u589e\\u76ca\\n    double Kaz;   // \\u589e\\u7a33\\u56de\\u8def\\u589e\\u76ca\\n    double Kpz;   // \\u6bd4\\u4f8b\\u589e\\u76ca\\n\\n    double eNy; // \\u8fc7\\u8f7d\\u8ddf\\u8e2a\\u8bef\\u5dee\\n    double i_eNy; // \\u8fc7\\u8f7d\\u79ef\\u5206\\u9879\\n    double p_eNy; // \\u8fc7\\u8f7d\\u6bd4\\u4f8b\\u9879\\n\\n    double i_eSAC; // \\u589e\\u7a33\\u56de\\u8def\\u79ef\\u5206\\u9879\\n\\n    double Kp_V, Ki_V, Kd_V; // \\u901f\\u5ea6\\u63a7\\u5236\\u53c2\\u6570\\n\\n    double i_V; // \\u901f\\u5ea6\\u79ef\\u5206\\u9879\\n    double d_eV; // \\u901f\\u5ea6\\u5fae\\u5206\\u9879\\n    double eV_prev; // \\u901f\\u5ea6\\u8bef\\u5dee\\u524d\\u503c\\n\\n    double Ny; // \\u5f53\\u524d\\u8fc7\\u8f7d\\n    double wz; // \\u5f53\\u524d\\u6eda\\u8f6c\\u89d2\\u901f\\u5ea6\\n\\n    WingedCone2D_Classic() {}\\n\\n    WingedCone2D_Classic(py::dict input_dict) : WingedCone2D(input_dict)\\n    {\\n        Kiz = input_dict[\\&quot;Kiz\\&quot;].cast&lt;double&gt;();\\n        Kwz = input_dict[\\&quot;Kwz\\&quot;].cast&lt;double&gt;();\\n        Kaz = input_dict[\\&quot;Kaz\\&quot;].cast&lt;double&gt;();\\n        Kpz = input_dict[\\&quot;Kpz\\&quot;].cast&lt;double&gt;();\\n\\n        Kp_V = input_dict[\\&quot;Kp_V\\&quot;].cast&lt;double&gt;();\\n        Ki_V = input_dict[\\&quot;Ki_V\\&quot;].cast&lt;double&gt;();\\n        Kd_V = input_dict[\\&quot;Kd_V\\&quot;].cast&lt;double&gt;();\\n\\n        eNy = 0;\\n        i_eNy = 0;\\n        p_eNy = 0;\\n        i_eSAC = 0;\\n        i_V = 0;\\n        d_eV = 0;\\n        eV_prev = 0;\\n\\n        _D();\\n        _L();\\n        _T();\\n        _M();\\n\\n        Ny = (T * (sin(alpha) * cos(gamma_v) - cos(alpha) * sin(beta) * sin(gamma_v))\\n                                + L * cos(gamma_v) - N * sin(gamma_v) - m * g * cos(theta_v)) / (m * g);\\n        wz = ang_vel[2];\\n    }\\n\\n    virtual void reset() override\\n    {\\n        *this = WingedCone2D_Classic(initial_state);\\n    }\\n\\n    double V_controller(double Vc, double V, double dt)\\n    {\\n        // \\u901f\\u5ea6\\u8ddf\\u8e2a\\u8bef\\u5dee\\n        double eV = Vc - V;\\n        i_V += eV * dt;\\n        d_eV = (eV - eV_prev) / dt;\\n        eV_prev = eV;\\n\\n        double u1a = Kp_V * eV + Ki_V * i_V + Kd_V * d_eV;\\n        if (u1a &lt; 0) \\n        {\\n            u1a = 0;\\n        }\\n\\n        return u1a;\\n    }\\n\\n    double Ny_controller(double Nyc, double Ny, double wz, double dt)\\n    {\\n        // \\u8fc7\\u8f7d\\u8ddf\\u8e2a\\u8bef\\u5dee\\n        eNy = Nyc - Ny;\\n\\n        // PI\\u6821\\u6b63\\u73af\\u8282\\n        i_eNy += eNy * dt;\\n        p_eNy = eNy;\\n\\n        double pi_eNy = Kiz * i_eNy + Kpz * p_eNy;\\n\\n        // \\u589e\\u7a33\\u56de\\u8def\\n        double eSAC = pi_eNy - Kaz * wz;\\n        i_eSAC += eSAC * dt;\\n\\n        // \\u963b\\u5c3c\\u56de\\u8def\\n        double eDamp = i_eSAC - Kwz * wz;\\n\\n        return eDamp;\\n    }\\n\\n    virtual py::dict to_dict() override\\n    {\\n        py::dict output_dict = WingedCone2D::to_dict();\\n        output_dict[\\&quot;Ny\\&quot;] = Ny;\\n        return output_dict;\\n    }\\n\\n    virtual py::object step(py::dict action) override\\n    {\\n        double dt = action[\\&quot;dt\\&quot;].cast&lt;double&gt;();\\n\\n        double Nyc = action[\\&quot;Nyc\\&quot;].cast&lt;double&gt;();\\n        double Vc = action[\\&quot;Vc\\&quot;].cast&lt;double&gt;();\\n\\n        delta_e = Ny_controller(Nyc, Ny, wz, dt*0.1);\\n        delta_e = std::clamp(delta_e, -25 / 57.3, 25 / 57.3);\\n\\n        double Phi = V_controller(Vc, V, dt*0.1);\\n\\n        // \\u8ba1\\u7b97\\u6c14\\u52a8\\u529b\\n        _D();\\n        _L();\\n        _T();\\n        _M();\\n\\n        if (integrator == \\&quot;euler\\&quot;)\\n        {\\n            *this = *this + this-&gt;d() * dt;\\n        }\\n        else if (integrator == \\&quot;midpoint\\&quot;)\\n        {\\n            auto temp1 = *this + this-&gt;d() * (0.5 * dt);\\n            auto k1 = temp1.d();\\n            *this = *this + k1 * dt;\\n        }\\n        else if (integrator == \\&quot;rk23\\&quot;)\\n        {\\n            auto k1 = this-&gt;d();\\n            auto temp1 = *this + k1 * (0.5 * dt);\\n            auto k2 = temp1.d();\\n            auto temp2 = *this + k2 * (0.5 * dt);\\n            auto k3 = temp2.d();\\n            *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);\\n        }\\n        else if (integrator == \\&quot;rk45\\&quot;)\\n        {\\n            auto k1 = this-&gt;d();\\n            auto temp1 = *this + k1 * (0.5 * dt);\\n            auto k2 = temp1.d();\\n            auto temp2 = *this + k2 * (0.5 * dt);\\n            auto k3 = temp2.d();\\n            auto temp3 = *this + k3 * dt;\\n            auto k4 = temp3.d();\\n            *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);\\n        }\\n\\n        beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);\\n        alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);\\n        gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);\\n\\n        vel[0] = V * cos(theta_v) * cos(phi_v);\\n        vel[1] = V * sin(theta_v);\\n        vel[2] = -V * cos(theta_v) * sin(phi_v);\\n        h = pos[1];\\n\\n        Tem = Temperature(h);\\n        Pres = Pressure(h);\\n        Rho = Density(Tem, Pres);\\n        a = SpeedofSound(Tem);\\n        g = Gravity(h);\\n\\n        q = 0.5 * Rho * V * V;\\n\\n        Ny = (T * (sin(alpha) * cos(gamma_v) - cos(alpha) * sin(beta) * sin(gamma_v))\\n                                + L * cos(gamma_v) - N * sin(gamma_v) - m * g * cos(theta_v)) / (m * g);\\n        wz = ang_vel[2];\\n\\n        return to_dict();\\n    }\\n};\\n</span></div>","classes":"torchlight","styles":"background-color: #FFFFFF; --theme-selection-background: #4373c2;"}}
