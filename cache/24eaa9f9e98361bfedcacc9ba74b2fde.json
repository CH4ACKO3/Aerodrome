{"expires":1743603300.638,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class Minimal(Env):</span></div><div class='line'><span style=\"color: #A6ACCD;\">    def __init__(self):</span></div><div class='line'><span style=\"color: #A6ACCD;\">        self.env = MinimalEnv() # 初始化 C++ 环境</span></div><div class='line'><span style=\"color: #A6ACCD;\">        self.state = 0 # 初始化 Python 环境内部状态</span></div><div class='line'><span style=\"color: #A6ACCD;\">        print(&quot;Initialize MinimalEnv&quot;)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    def step(self, action):</span></div><div class='line'><span style=\"color: #A6ACCD;\">        self.state += 1 # 在每一步中，Python 环境内部状态加 1</span></div><div class='line'><span style=\"color: #A6ACCD;\">        try:</span></div><div class='line'><span style=\"color: #A6ACCD;\">            input_dict = {</span></div><div class='line'><span style=\"color: #A6ACCD;\">                &quot;value&quot;: action, # 将 Python 环境接收到的整数转换为动作字典</span></div><div class='line'><span style=\"color: #A6ACCD;\">            }</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result = self.env.step(input_dict) # 调用 C++ 环境的 step 方法，并接收返回结果</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;py_state&quot;] = self.state # 将 Python 环境内部状态添加到返回结果中</span></div><div class='line'><span style=\"color: #A6ACCD;\">            return result</span></div><div class='line'><span style=\"color: #A6ACCD;\">        except ValueError:</span></div><div class='line'><span style=\"color: #A6ACCD;\">            print(&quot;input a valid integer&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        except KeyboardInterrupt:</span></div><div class='line'><span style=\"color: #A6ACCD;\">            print(&quot;\\nquit&quot;)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    def reset(self):</span></div><div class='line'><span style=\"color: #A6ACCD;\">        self.state = 0 # 重置 Python 环境内部状态</span></div><div class='line'><span style=\"color: #A6ACCD;\">        print(&quot;Reset MinimalEnv&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result = self.env.reset() # 调用 C++ 环境的 reset 方法，并接收返回结果</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;py_state&quot;] = self.state # 将 Python 环境内部状态添加到返回结果中</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return result</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    def close(self):</span></div><div class='line'><span style=\"color: #A6ACCD;\">        print(&quot;Close MinimalEnv&quot;) # 在有些情况下，可能需要在关闭环境时进行一些清理工作</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
