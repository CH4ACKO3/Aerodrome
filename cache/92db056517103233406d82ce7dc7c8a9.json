{"expires":1743604837.332,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color:#1b1f234d; text-align: right; -webkit-user-select: none; user-select: none;\" class=\"line-number\">1</span><span style=\"color: #24292e;\">class WingedCone2D : public Aircraft3D\\n{\\npublic:\\n    double delta_e; // \\u5347\\u964d\\u8235\\u504f\\u89d2\\n\\n    WingedCone2D() {}\\n\\n    WingedCone2D(py::dict input_dict) : Aircraft3D(input_dict)\\n    {\\n        delta_e = 0.0;        \\n    }\\n\\n    virtual void reset() override\\n    {\\n        *this = WingedCone2D(initial_state);\\n    }\\n\\n    void _D()\\n    {\\n        double CD = 0.645 * alpha * alpha + 0.0043378 * alpha + 0.003772;\\n        D = q * S * CD;\\n    }\\n\\n    void _L()\\n    {\\n        double CL = 0.6203 * alpha + 2.4 * sin(0.08 * alpha);\\n        L = q * S * CL;\\n    }\\n\\n    virtual void _T()\\n    {\\n        T = 4.959e3;\\n    }\\n\\n    void _M()\\n    {\\n        double CM1 = -0.035 * alpha * alpha + 0.036617 * alpha + 5.3261e-6;\\n        double CM2 = ang_vel[2] * c * (-6.796 * alpha * alpha + 0.3015 * alpha - 0.2289) / (2 * V);\\n        double CM3 = 0.0292 * (delta_e - alpha);\\n        M[2] = q * S * c * (CM1 + CM2 + CM3);\\n    }\\n\\n    virtual py::dict to_dict() override\\n    {\\n        py::dict output_dict = Aircraft3D::to_dict();\\n        output_dict[\\&quot;delta_e\\&quot;] = delta_e;\\n        return output_dict;\\n    }\\n\\n    virtual py::object step(py::dict action) override\\n    {\\n        double dt = action[\\&quot;dt\\&quot;].cast&lt;double&gt;();\\n\\n        delta_e = action[\\&quot;delta_e\\&quot;].cast&lt;double&gt;(); // \\u4f20\\u5165\\u52a8\\u4f5c\\u76f4\\u63a5\\u4fee\\u6539 delta_e\\n\\n        // \\u65b0\\u589e\\u8ba1\\u7b97\\u6c14\\u52a8\\u529b\\u7684\\u90e8\\u5206\\n        _D();\\n        _L();\\n        _T();\\n        _M();\\n\\n        if (integrator == \\&quot;euler\\&quot;)\\n        {\\n            *this = *this + this-&gt;d() * dt;\\n        }\\n        else if (integrator == \\&quot;midpoint\\&quot;)\\n        {\\n            auto temp1 = *this + this-&gt;d() * (0.5 * dt);\\n            auto k1 = temp1.d();\\n            *this = *this + k1 * dt;\\n        }\\n        else if (integrator == \\&quot;rk23\\&quot;)\\n        {\\n            auto k1 = this-&gt;d();\\n            auto temp1 = *this + k1 * (0.5 * dt);\\n            auto k2 = temp1.d();\\n            auto temp2 = *this + k2 * (0.5 * dt);\\n            auto k3 = temp2.d();\\n            *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);\\n        }\\n        else if (integrator == \\&quot;rk45\\&quot;)\\n        {\\n            auto k1 = this-&gt;d();\\n            auto temp1 = *this + k1 * (0.5 * dt);\\n            auto k2 = temp1.d();\\n            auto temp2 = *this + k2 * (0.5 * dt);\\n            auto k3 = temp2.d();\\n            auto temp3 = *this + k3 * dt;\\n            auto k4 = temp3.d();\\n            *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);\\n        }\\n\\n        beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);\\n        alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);\\n        gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);\\n\\n        vel[0] = V * cos(theta_v) * cos(phi_v);\\n        vel[1] = V * sin(theta_v);\\n        vel[2] = -V * cos(theta_v) * sin(phi_v);\\n        h = pos[1];\\n\\n        Tem = Temperature(h);\\n        Pres = Pressure(h);\\n        Rho = Density(Tem, Pres);\\n        a = SpeedofSound(Tem);\\n        g = Gravity(h);\\n\\n        q = 0.5 * Rho * V * V;\\n        return to_dict();\\n    }\\n};\\n</span></div>","classes":"torchlight","styles":"background-color: #fff; --theme-selection-background: #e2e5e9;"}}
