{"expires":1743603300.807,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\"># 直接从编译好的 C++ 模块中取出 WingedCone2D_Classic 和 Space3D 类使用，不经过 Python</span></div><div class='line'><span style=\"color: #A6ACCD;\">from aerodrome.simulator.CanonicalAircraftEnv.objects.WingedCone2D_Classic import WingedCone2D_Classic</span></div><div class='line'><span style=\"color: #A6ACCD;\">from aerodrome.simulator.Core.envs.Space3D import Space3D</span></div><div class='line'><span style=\"color: #A6ACCD;\">from math import *</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">if __name__ == &quot;__main__&quot;:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    dt = 0.001 # 定义步进步长，这里设置为固定值 0.001</span></div><div class='line'><span style=\"color: #A6ACCD;\">    # 实例化 Space3D 类，第二个实参表示步进步长，第三个实参表示每次步进分成的积分次数</span></div><div class='line'><span style=\"color: #A6ACCD;\">    env = Space3D(dt, 0.001, 1) </span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    # 定义仿真对象的参数字典，用于生成对象</span></div><div class='line'><span style=\"color: #A6ACCD;\">    object_dict = {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;name&quot;: &quot;test&quot;,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;integrator&quot;: &quot;rk45&quot;,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;S&quot;: 3603.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;c&quot;: 80.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;m&quot;: 9375.0,</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;pos&quot;: [0.0, 33528.0, 0.0],</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;vel&quot;: [4590.29, 0.0, 0.0],</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;ang_vel&quot;: [0.0, 0.0, 0.0],</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;J&quot;: [1.0, 7*10**6, 7*10**6],</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;theta&quot;: 0.00/180*pi,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;phi&quot;: 0.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;gamma&quot;: 0.0,   </span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;theta_v&quot;: 0.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;phi_v&quot;: 0.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;gamma_v&quot;: 0.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;alpha&quot;: 0.00/180*pi,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;beta&quot;: 0.0,</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Kiz&quot;: 0.2597,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Kwz&quot;: 1.6,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Kaz&quot;: 13/2,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Kpz&quot;: 0.14,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Kp_V&quot;: 5.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Ki_V&quot;: 1.0,</span></div><div class='line'><span style=\"color: #A6ACCD;\">        &quot;Kd_V&quot;: 0.3</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    object = WingedCone2D_Classic(object_dict) # 从字典生成对象</span></div><div class='line'><span style=\"color: #A6ACCD;\">    env.add_object(object) # 将对象添加到环境中</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    # 用于保存数据的数组</span></div><div class='line'><span style=\"color: #A6ACCD;\">    import numpy as np</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    cnt = 10000</span></div><div class='line'><span style=\"color: #A6ACCD;\">    x = np.arange(cnt) * dt</span></div><div class='line'><span style=\"color: #A6ACCD;\">    y = np.zeros(cnt)</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    Nyc = 0.0 # 过载指令</span></div><div class='line'><span style=\"color: #A6ACCD;\">    Vc = 3000 # 速度指令</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    for i in range(cnt):</span></div><div class='line'><span style=\"color: #A6ACCD;\">        action = {&quot;test&quot;: {&quot;Nyc&quot;:Nyc, &quot;Vc&quot;:Vc}} # 定义动作</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result = env.step(action) # 步进并接受返回值</span></div><div class='line'><span style=\"color: #A6ACCD;\">        y[i] = result[&quot;test&quot;][&quot;Ny&quot;] # 从返回的字典中提取需要的值</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    # 绘图</span></div><div class='line'><span style=\"color: #A6ACCD;\">    import matplotlib.pyplot as plt</span></div><div class='line'><span style=\"color: #A6ACCD;\">    plt.plot(x, y)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    plt.xlabel(&quot;Time (s)&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    plt.ylabel(&quot;Ny&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    plt.axhline(y=Nyc, color=&#39;r&#39;, linestyle=&#39;--&#39;, alpha=0.5)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    plt.show()</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    print(env.to_dict())</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
