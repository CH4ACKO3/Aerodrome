{"expires":1743603300.805,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class WingedCone2D : public Aircraft3D</span></div><div class='line'><span style=\"color: #A6ACCD;\">{</span></div><div class='line'><span style=\"color: #A6ACCD;\">public:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double delta_e; // 升降舵偏角</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    WingedCone2D() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    WingedCone2D(py::dict input_dict) : Aircraft3D(input_dict)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        delta_e = 0.0;        </span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual void reset() override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = WingedCone2D(initial_state);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    void _D()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double CD = 0.645 * alpha * alpha + 0.0043378 * alpha + 0.003772;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        D = q * S * CD;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    void _L()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double CL = 0.6203 * alpha + 2.4 * sin(0.08 * alpha);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        L = q * S * CL;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual void _T()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        T = 4.959e3;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    void _M()</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double CM1 = -0.035 * alpha * alpha + 0.036617 * alpha + 5.3261e-6;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double CM2 = ang_vel[2] * c * (-6.796 * alpha * alpha + 0.3015 * alpha - 0.2289) / (2 * V);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double CM3 = 0.0292 * (delta_e - alpha);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        M[2] = q * S * c * (CM1 + CM2 + CM3);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual py::dict to_dict() override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict output_dict = Aircraft3D::to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;delta_e&quot;] = delta_e;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual py::object step(py::dict action) override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double dt = action[&quot;dt&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        delta_e = action[&quot;delta_e&quot;].cast&lt;double&gt;(); // 传入动作直接修改 delta_e</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        // 新增计算气动力的部分</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _D();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _L();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _T();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _M();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        if (integrator == &quot;euler&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + this-&gt;d() * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;midpoint&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + this-&gt;d() * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + k1 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;rk23&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;rk45&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp3 = *this + k3 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k4 = temp3.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        vel[0] = V * cos(theta_v) * cos(phi_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        vel[1] = V * sin(theta_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        vel[2] = -V * cos(theta_v) * sin(phi_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        h = pos[1];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        Tem = Temperature(h);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Pres = Pressure(h);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Rho = Density(Tem, Pres);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        a = SpeedofSound(Tem);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        g = Gravity(h);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        q = 0.5 * Rho * V * V;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">};</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
