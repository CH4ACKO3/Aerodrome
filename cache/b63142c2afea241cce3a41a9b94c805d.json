{"expires":1743603300.806,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class WingedCone2D_Classic : public WingedCone2D</span></div><div class='line'><span style=\"color: #A6ACCD;\">{</span></div><div class='line'><span style=\"color: #A6ACCD;\">public:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    // 俯仰角增稳过载驾驶仪控制参数</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double Kiz;   // 积分增益</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double Kwz;   // 角速度增益</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double Kaz;   // 增稳回路增益</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double Kpz;   // 比例增益</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double eNy; // 过载跟踪误差</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double i_eNy; // 过载积分项</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double p_eNy; // 过载比例项</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double i_eSAC; // 增稳回路积分项</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double Kp_V, Ki_V, Kd_V; // 速度控制参数</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double i_V; // 速度积分项</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double d_eV; // 速度微分项</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double eV_prev; // 速度误差前值</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double Ny; // 当前过载</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double wz; // 当前滚转角速度</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    WingedCone2D_Classic() {}</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    WingedCone2D_Classic(py::dict input_dict) : WingedCone2D(input_dict)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Kiz = input_dict[&quot;Kiz&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Kwz = input_dict[&quot;Kwz&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Kaz = input_dict[&quot;Kaz&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Kpz = input_dict[&quot;Kpz&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        Kp_V = input_dict[&quot;Kp_V&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Ki_V = input_dict[&quot;Ki_V&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Kd_V = input_dict[&quot;Kd_V&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        eNy = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        i_eNy = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        p_eNy = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        i_eSAC = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        i_V = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        d_eV = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        eV_prev = 0;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        _D();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _L();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _T();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _M();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        Ny = (T * (sin(alpha) * cos(gamma_v) - cos(alpha) * sin(beta) * sin(gamma_v))</span></div><div class='line'><span style=\"color: #A6ACCD;\">                                + L * cos(gamma_v) - N * sin(gamma_v) - m * g * cos(theta_v)) / (m * g);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        wz = ang_vel[2];</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual void reset() override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = WingedCone2D_Classic(initial_state);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double V_controller(double Vc, double V, double dt)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // 速度跟踪误差</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double eV = Vc - V;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        i_V += eV * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        d_eV = (eV - eV_prev) / dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        eV_prev = eV;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        double u1a = Kp_V * eV + Ki_V * i_V + Kd_V * d_eV;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        if (u1a &lt; 0) </span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            u1a = 0;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return u1a;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    double Ny_controller(double Nyc, double Ny, double wz, double dt)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // 过载跟踪误差</span></div><div class='line'><span style=\"color: #A6ACCD;\">        eNy = Nyc - Ny;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        // PI校正环节</span></div><div class='line'><span style=\"color: #A6ACCD;\">        i_eNy += eNy * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        p_eNy = eNy;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        double pi_eNy = Kiz * i_eNy + Kpz * p_eNy;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        // 增稳回路</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double eSAC = pi_eNy - Kaz * wz;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        i_eSAC += eSAC * dt;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        // 阻尼回路</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double eDamp = i_eSAC - Kwz * wz;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return eDamp;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual py::dict to_dict() override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict output_dict = WingedCone2D::to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        output_dict[&quot;Ny&quot;] = Ny;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return output_dict;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    virtual py::object step(py::dict action) override</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double dt = action[&quot;dt&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        double Nyc = action[&quot;Nyc&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        double Vc = action[&quot;Vc&quot;].cast&lt;double&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        delta_e = Ny_controller(Nyc, Ny, wz, dt*0.1);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        delta_e = std::clamp(delta_e, -25 / 57.3, 25 / 57.3);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        double Phi = V_controller(Vc, V, dt*0.1);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        // 计算气动力</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _D();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _L();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _T();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        _M();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        if (integrator == &quot;euler&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + this-&gt;d() * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;midpoint&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + this-&gt;d() * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + k1 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;rk23&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else if (integrator == &quot;rk45&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto temp3 = *this + k3 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">            auto k4 = temp3.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">            *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        vel[0] = V * cos(theta_v) * cos(phi_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        vel[1] = V * sin(theta_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        vel[2] = -V * cos(theta_v) * sin(phi_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        h = pos[1];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        Tem = Temperature(h);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Pres = Pressure(h);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        Rho = Density(Tem, Pres);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        a = SpeedofSound(Tem);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        g = Gravity(h);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        q = 0.5 * Rho * V * V;</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        Ny = (T * (sin(alpha) * cos(gamma_v) - cos(alpha) * sin(beta) * sin(gamma_v))</span></div><div class='line'><span style=\"color: #A6ACCD;\">                                + L * cos(gamma_v) - N * sin(gamma_v) - m * g * cos(theta_v)) / (m * g);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        wz = ang_vel[2];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        return to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">};</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
