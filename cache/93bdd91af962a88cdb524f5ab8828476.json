{"expires":1743603300.637,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">class MinimalEnv : public BaseEnv { // 继承自 BaseEnv</span></div><div class='line'><span style=\"color: #A6ACCD;\">public:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    MinimalEnv() : cpp_state(0) {} // 初始化 cpp_state 为 0</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    ~MinimalEnv() {} // 析构函数</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::object reset() override // 重写 BaseEnv 中定义的 reset 方法</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict result; // 创建一个字典来存储要返回的结果</span></div><div class='line'><span style=\"color: #A6ACCD;\">        cpp_state = 0; // 将 cpp_state 重置为 0</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;cpp_state&quot;] = cpp_state;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;info&quot;] = &quot;&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    py::object step(const py::object&amp; action) override // step 方法从 Python 端接收动作</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // 在每一步中，环境将 action[&quot;value&quot;] 的值加到其 cpp_state 上</span></div><div class='line'><span style=\"color: #A6ACCD;\">        py::dict result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        if (action.contains(&quot;value&quot;))</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            try {</span></div><div class='line'><span style=\"color: #A6ACCD;\">                int value = action[&quot;value&quot;].cast&lt;int&gt;(); // 将 action[&quot;value&quot;] 的值转换为整数</span></div><div class='line'><span style=\"color: #A6ACCD;\">                cpp_state += value; // 将该值加到 cpp_state 上</span></div><div class='line'><span style=\"color: #A6ACCD;\">            } catch (const std::exception &amp;e) {</span></div><div class='line'><span style=\"color: #A6ACCD;\">                result[&quot;info&quot;] = std::string(&quot;failed to convert value to int: &quot;) + e.what(); // 如果该值不是整数，在结果中添加错误信息</span></div><div class='line'><span style=\"color: #A6ACCD;\">            }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        else</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;error: action must contain &#39;value&#39;&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">        result[&quot;cpp_state&quot;] = cpp_state;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        if (!result.contains(&quot;info&quot;))</span></div><div class='line'><span style=\"color: #A6ACCD;\">        {</span></div><div class='line'><span style=\"color: #A6ACCD;\">            // 如果结果中没有 info 键，添加一个空字符串，以避免 key error</span></div><div class='line'><span style=\"color: #A6ACCD;\">            result[&quot;info&quot;] = &quot;&quot;;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        }</span></div><div class='line'><span style=\"color: #A6ACCD;\">        return result;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">private:</span></div><div class='line'><span style=\"color: #A6ACCD;\">    int cpp_state = 0; // 私有成员变量，用于存储环境的状态</span></div><div class='line'><span style=\"color: #A6ACCD;\">};</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
