{"expires":1743603300.745,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color: #A6ACCD;\">virtual py::object step(py::dict action) override // `virtual` 表示该函数可以被重写，`override` 表示重写父类中的同名函数</span></div><div class='line'><span style=\"color: #A6ACCD;\">{</span></div><div class='line'><span style=\"color: #A6ACCD;\">    double dt = action[&quot;dt&quot;].cast&lt;double&gt;(); // 从动作字典中读取积分步长</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    L = action[&quot;L&quot;].cast&lt;double&gt;(); // 从动作字典中读取飞行器所受外力</span></div><div class='line'><span style=\"color: #A6ACCD;\">    D = action[&quot;D&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    N = action[&quot;N&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    T = action[&quot;T&quot;].cast&lt;double&gt;();</span></div><div class='line'><span style=\"color: #A6ACCD;\">    M = action[&quot;M&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 使用不同的积分方法更新飞行器状态</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    if (integrator == &quot;euler&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // 这里可以直接运算是因为在 Object3D 类中重载了四则运算</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // this-&gt;d() 调用求导方法，返回动力学导数（即，返回的实例的每个属性是传入的实例对应属性的导数）</span></div><div class='line'><span style=\"color: #A6ACCD;\">        // this-&gt;d() * dt 即表示增量</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = *this + this-&gt;d() * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">    else if (integrator == &quot;midpoint&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto temp1 = *this + this-&gt;d() * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k1 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = *this + k1 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">    else if (integrator == &quot;rk23&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'><span style=\"color: #A6ACCD;\">    else if (integrator == &quot;rk45&quot;)</span></div><div class='line'><span style=\"color: #A6ACCD;\">    {</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k1 = this-&gt;d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto temp1 = *this + k1 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k2 = temp1.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto temp2 = *this + k2 * (0.5 * dt);</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k3 = temp2.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto temp3 = *this + k3 * dt;</span></div><div class='line'><span style=\"color: #A6ACCD;\">        auto k4 = temp3.d();</span></div><div class='line'><span style=\"color: #A6ACCD;\">        *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    }</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    // 由于在上面的动力学积分中只计算了必要的量</span></div><div class='line'><span style=\"color: #A6ACCD;\">    // 此处还需要对未更新的属性进行计算</span></div><div class='line'><span style=\"color: #A6ACCD;\">    beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    vel[0] = V * cos(theta_v) * cos(phi_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    vel[1] = V * sin(theta_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    vel[2] = -V * cos(theta_v) * sin(phi_v);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    h = pos[1];</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    Tem = Temperature(h);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    Pres = Pressure(h);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    Rho = Density(Tem, Pres);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    a = SpeedofSound(Tem);</span></div><div class='line'><span style=\"color: #A6ACCD;\">    g = Gravity(h);</span></div><div class='line'>&nbsp;</div><div class='line'><span style=\"color: #A6ACCD;\">    q = 0.5 * Rho * V * V;</span></div><div class='line'><span style=\"color: #A6ACCD;\">    return to_dict();</span></div><div class='line'><span style=\"color: #A6ACCD;\">}</span></div>","classes":"torchlight","styles":"background-color: #292D3E; --theme-selection-background: #00000080;"}}
