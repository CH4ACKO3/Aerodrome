{"expires":1743605056.887,"value":{"highlighted":"<!-- Syntax highlighted by torchlight.dev --><div class='line'><span style=\"color:#2f86d2; text-align: right; -webkit-user-select: none; user-select: none;\" class=\"line-number\">1</span><span style=\"color: #002339;\">virtual py::object step(py::dict action) override // `virtual` \\u8868\\u793a\\u8be5\\u51fd\\u6570\\u53ef\\u4ee5\\u88ab\\u91cd\\u5199\\uff0c`override` \\u8868\\u793a\\u91cd\\u5199\\u7236\\u7c7b\\u4e2d\\u7684\\u540c\\u540d\\u51fd\\u6570\\n{\\n    double dt = action[\\&quot;dt\\&quot;].cast&lt;double&gt;(); // \\u4ece\\u52a8\\u4f5c\\u5b57\\u5178\\u4e2d\\u8bfb\\u53d6\\u79ef\\u5206\\u6b65\\u957f\\n\\n    L = action[\\&quot;L\\&quot;].cast&lt;double&gt;(); // \\u4ece\\u52a8\\u4f5c\\u5b57\\u5178\\u4e2d\\u8bfb\\u53d6\\u98de\\u884c\\u5668\\u6240\\u53d7\\u5916\\u529b\\n    D = action[\\&quot;D\\&quot;].cast&lt;double&gt;();\\n    N = action[\\&quot;N\\&quot;].cast&lt;double&gt;();\\n    T = action[\\&quot;T\\&quot;].cast&lt;double&gt;();\\n    M = action[\\&quot;M\\&quot;].cast&lt;std::array&lt;double, 3&gt;&gt;();\\n\\n    // \\u4f7f\\u7528\\u4e0d\\u540c\\u7684\\u79ef\\u5206\\u65b9\\u6cd5\\u66f4\\u65b0\\u98de\\u884c\\u5668\\u72b6\\u6001\\n\\n    if (integrator == \\&quot;euler\\&quot;)\\n    {\\n        // \\u8fd9\\u91cc\\u53ef\\u4ee5\\u76f4\\u63a5\\u8fd0\\u7b97\\u662f\\u56e0\\u4e3a\\u5728 Object3D \\u7c7b\\u4e2d\\u91cd\\u8f7d\\u4e86\\u56db\\u5219\\u8fd0\\u7b97\\n        // this-&gt;d() \\u8c03\\u7528\\u6c42\\u5bfc\\u65b9\\u6cd5\\uff0c\\u8fd4\\u56de\\u52a8\\u529b\\u5b66\\u5bfc\\u6570\\uff08\\u5373\\uff0c\\u8fd4\\u56de\\u7684\\u5b9e\\u4f8b\\u7684\\u6bcf\\u4e2a\\u5c5e\\u6027\\u662f\\u4f20\\u5165\\u7684\\u5b9e\\u4f8b\\u5bf9\\u5e94\\u5c5e\\u6027\\u7684\\u5bfc\\u6570\\uff09\\n        // this-&gt;d() * dt \\u5373\\u8868\\u793a\\u589e\\u91cf\\n        *this = *this + this-&gt;d() * dt;\\n    }\\n    else if (integrator == \\&quot;midpoint\\&quot;)\\n    {\\n        auto temp1 = *this + this-&gt;d() * (0.5 * dt);\\n        auto k1 = temp1.d();\\n        *this = *this + k1 * dt;\\n    }\\n    else if (integrator == \\&quot;rk23\\&quot;)\\n    {\\n        auto k1 = this-&gt;d();\\n        auto temp1 = *this + k1 * (0.5 * dt);\\n        auto k2 = temp1.d();\\n        auto temp2 = *this + k2 * (0.5 * dt);\\n        auto k3 = temp2.d();\\n        *this = *this + (k1 + k2 * 2 + k3) * (dt / 4);\\n    }\\n    else if (integrator == \\&quot;rk45\\&quot;)\\n    {\\n        auto k1 = this-&gt;d();\\n        auto temp1 = *this + k1 * (0.5 * dt);\\n        auto k2 = temp1.d();\\n        auto temp2 = *this + k2 * (0.5 * dt);\\n        auto k3 = temp2.d();\\n        auto temp3 = *this + k3 * dt;\\n        auto k4 = temp3.d();\\n        *this = *this + (k1 + k2 * 2 + k3 * 2 + k4) * (dt / 6);\\n    }\\n\\n    // \\u7531\\u4e8e\\u5728\\u4e0a\\u9762\\u7684\\u52a8\\u529b\\u5b66\\u79ef\\u5206\\u4e2d\\u53ea\\u8ba1\\u7b97\\u4e86\\u5fc5\\u8981\\u7684\\u91cf\\n    // \\u6b64\\u5904\\u8fd8\\u9700\\u8981\\u5bf9\\u672a\\u66f4\\u65b0\\u7684\\u5c5e\\u6027\\u8fdb\\u884c\\u8ba1\\u7b97\\n    beta = cos(theta_v) * (cos(gamma) * sin(phi - phi_v) + sin(theta) * sin(gamma) * cos(phi - phi_v)) - sin(theta_v) * cos(theta) * sin(gamma);\\n    alpha = (cos(theta_v) * (sin(theta) * cos(gamma) * cos(phi - phi_v) - sin(gamma) * sin(phi - phi_v)) - sin(theta_v) * cos(theta) * cos(gamma)) / cos(beta);\\n    gamma_v = (cos(alpha) * sin(beta) * sin(theta) - sin(alpha) * sin(beta) * cos(gamma) * cos(theta) + cos(beta) * sin(gamma) * cos(theta)) / cos(theta_v);\\n\\n    vel[0] = V * cos(theta_v) * cos(phi_v);\\n    vel[1] = V * sin(theta_v);\\n    vel[2] = -V * cos(theta_v) * sin(phi_v);\\n    h = pos[1];\\n\\n    Tem = Temperature(h);\\n    Pres = Pressure(h);\\n    Rho = Density(Tem, Pres);\\n    a = SpeedofSound(Tem);\\n    g = Gravity(h);\\n\\n    q = 0.5 * Rho * V * V;\\n    return to_dict();\\n}</span></div>","classes":"torchlight","styles":"background-color: #FFFFFF; --theme-selection-background: #4373c2;"}}
