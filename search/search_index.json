{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Aerodrome - \u6982\u8ff0","text":"<p>Aerodrome \u662f\u4e00\u4e2a\u57fa\u4e8e C++ \u548c Python \u8054\u5408\u7f16\u7a0b\u7684\u8f7b\u91cf\u7ea7\u5e93\uff0c\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u9ad8\u6027\u80fd\u52a8\u529b\u5b66\u4eff\u771f\u3001Python \u4ea4\u4e92\u63a5\u53e3\u4ee5\u53ca\u5f3a\u5316\u5b66\u4e60\u548c\u4f20\u7edf\u63a7\u5236\u7684\u4ee3\u7801\u793a\u4f8b\u3002\u5b83\u4e3b\u8981\u9762\u5411\u4e24\u7c7b\u7528\u6237\uff1a\u521d\u5b66\u5f3a\u5316\u5b66\u4e60\u7684\u7814\u7a76\u8005\uff0c\u6216\u5e0c\u671b\u5c06\u5f3a\u5316\u5b66\u4e60\u5e94\u7528\u4e8e\u7279\u5b9a\u9886\u57df\uff08\u5982\u98de\u63a7\uff09\u5e76\u9700\u8981\u81ea\u5b9a\u4e49\u4eff\u771f\u73af\u5883\u7684\u7814\u7a76\u8005\u3002\u4e3a\u4e86\u786e\u4fdd\u826f\u597d\u7684\u53ef\u4fee\u6539\u6027\u548c\u53ef\u8bfb\u6027\uff0cAerodrome \u7684\u6bcf\u4e2a\u90e8\u5206\u90fd\u5c3d\u91cf\u907f\u514d\u4f7f\u7528\u590d\u6742\u7684\u6cdb\u578b\u7f16\u7a0b\u6216\u9ad8\u7ea7\u8bed\u8a00\u7279\u6027\uff0c\u5e76\u5728\u4ee3\u7801\u4e2d\u4f5c\u4e86\u8be6\u5c3d\u7684\u6ce8\u91ca\u3002</p> <p>Aerodrome \u7684\u4e3b\u8981\u5185\u5bb9\u548c\u7279\u70b9\u5305\u62ec\uff1a</p> <ul> <li> <p>\u4eff\u7167 Gym \u7684\u4ee3\u7801\u548c\u63a5\u53e3\u98ce\u683c</p> </li> <li> <p>\u4e00\u4e2a\u793a\u4f8b\u73af\u5883\u548c\u8fc1\u79fb\u7248\u7684 Gym-CartPole \uff0c\u7528\u4e8e\u6d4b\u8bd5\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u7684\u6b63\u786e\u6027</p> </li> <li> <p>\u9ad8\u5ea6\u53ef\u81ea\u5b9a\u4e49\u7684\u56fa\u5b9a\u7ffc\u98de\u884c\u5668\u4eff\u771f\u793a\u4f8b\u4ee3\u7801</p> </li> <li> <p>\u57fa\u4e8e\u516c\u5f00\u8d44\u6599\u7684 Winged-Cone \u975e\u7ebf\u6027\u6c14\u52a8\u6a21\u578b\uff0c\u4ee5\u53ca\u5176\u52a8\u529b\u5b66\u4eff\u771f\uff08C++ \u548c Python \u4e24\u79cd\u8bed\u8a00\u7248\u672c\uff0c\u5e76\u5305\u542b\u8fd0\u884c\u6027\u80fd\u5bf9\u6bd4\uff01\uff09</p> </li> <li> <p>Winged-Cone \u7eb5\u5411\u8fc7\u8f7d\u63a7\u5236\u7684\u4f20\u7edf\u4e09\u56de\u8def\u9a7e\u9a76\u4eea\u5b9e\u73b0\u548c \u8fd1\u7aef\u7b56\u7565\u4f18\u5316\uff08PPO \uff09\u5b9e\u73b0</p> </li> </ul> <p>Note Aerodrome \u4e0d\u662f \u4e00\u4e2a\u6a21\u5757\u5316\u5e93\uff0c\u56e0\u6b64\u5b83\u5e76\u4e0d\u9002\u5408\u88ab\u5bfc\u5165\u4f7f\u7528\u3002Aerodrome \u4ee5\u90e8\u5206\u4ee3\u7801\u91cd\u590d\u4e3a\u4ee3\u4ef7\uff0c\u5c3d\u91cf\u4f7f\u5f97\u6240\u6709\u4ee3\u7801\u7b80\u6d01\u3001\u6613\u4e8e\u7406\u89e3\u4e14\u65b9\u4fbf\u6269\u5c55\u3002Aerodrome \u4e5f\u6709\u5176\u5c40\u9650\u6027\uff0c\u4f8b\u5982\u7f3a\u5c11\u53ef\u89c6\u5316\u548c\u5b9e\u9a8c\u7ed3\u679c\u4fdd\u5b58\u529f\u80fd\uff1b\u5982\u679c\u4f60\u9700\u8981\u7279\u5b9a\u7684\u5f3a\u5316\u5b66\u4e60\u7b97\u6cd5\u793a\u4f8b\uff0c\u53ef\u4ee5\u53c2\u8003 CleanRL \u5e93\uff1b\u5982\u679c\u4f60\u9700\u8981\u5b9e\u73b0\u5176\u5b83\u98de\u884c\u5668\u6a21\u578b\uff08\u6216\u8005\u751a\u81f3\u5176\u5b83\u9886\u57df\u7684\u73af\u5883\uff09\uff0c\u53ef\u4ee5\u5728 Aerodrome \u4ee3\u7801\u57fa\u7840\u4e0a\u4fee\u6539\uff0c\u6216\u8005\u5b8c\u5168\u91cd\u5199\uff01</p>"},{"location":"get_started/","title":"\u5b89\u88c5 Aerodrome","text":"<p>1.\u521b\u5efa\u5e76\u6fc0\u6d3b Conda \u73af\u5883</p> <pre><code>$ conda create -n aerodrome python==3.9\n$ conda activate aerodrome\n</code></pre> <p>Aerodrome \u5728 <code>python&gt;=3.9.0,&lt;3.12</code> \u4e0a\u6d4b\u8bd5\uff0c\u4f46\u6e90\u7801\u4e2d\u5305\u542b\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08python/simulator \u4e0b\u7684 C++ \u7f16\u8bd1\u51fa\u7684\u6587\u4ef6\uff09\u662f\u5728 <code>python==3.9</code> \u73af\u5883\u4e0b\u751f\u6210\u7684\uff1b\u5982\u679c\u4f60\u8981\u4f7f\u7528\u5176\u5b83 python \u7248\u672c\u6216\u81ea\u5df1\u5b9e\u73b0\u7684\u73af\u5883\uff0c\u5219\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5e76\u4fdd\u8bc1\u7f16\u8bd1\u548c\u8fd0\u884c\u65f6\u7684 python \u7248\u672c\u4e00\u81f4\u3002</p> <p>2.\u5b89\u88c5 Pytorch</p> <p>\u8fd0\u884c\u5f3a\u5316\u5b66\u4e60\u4ee3\u7801\u9700\u8981\u7528\u5230 <code>torch</code> \u5e93\uff1b\u6e90\u7801\u5728 <code>torch==2.6.0</code> \u4e0a\u6d4b\u8bd5\u8fd0\u884c\uff0c\u4f46\u7406\u8bba\u4e0a\u53ef\u4ee5\u5728\u4efb\u610f <code>torch&gt;1.0.0</code> \u4ee5\u53ca\u517c\u5bb9\u7684 CUDA \u7248\u672c\u4e0a\u8fd0\u884c\u3002\u4f8b\u5982\uff0c<code>PyTorch 2.6.0</code> \u548c <code>CUDA 11.8</code>\uff1a</p> <pre><code>$ pip install torch==2.6.0 --index-url https://download.pytorch.org/whl/cu118\n</code></pre> <p>3.\u4ece\u6e90\u4ee3\u7801\u5b89\u88c5 Aerodrome</p> <pre><code>$ git clone https://github.com/CH4ACKO3/Aerodrome.git --recursive\n$ cd Aerodrome\n$ pip install .\n</code></pre> <p>4.\u7f16\u8bd1 C++ \u90e8\u5206\u4ee3\u7801\uff08\u53ef\u9009\uff09</p> <p>\u5982\u679c\u4f60\u8981\u4f7f\u7528\u81ea\u5df1\u5b9e\u73b0\u7684\u73af\u5883\uff0c\u6216\u4f7f\u7528\u7684 python \u7248\u672c\u4e0e\u6e90\u7801\u4e2d\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08<code>python==3.9</code>\uff09\u4e0d\u4e00\u81f4\uff0c\u5219\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u5e76\u5b89\u88c5\uff1a</p> <pre><code>$ cmake -B build\n$ cmake --build build\n$ pip install .\n</code></pre> <p>\u7f16\u8bd1\u65f6\u7684\u5e73\u53f0\u548c python \u7248\u672c\u4f1a\u5728\u4e8c\u8fdb\u5236\u6587\u4ef6\u540d\u4e2d\u663e\u793a\uff1b\u4f8b\u5982\uff0c*.cp39-win_amd64.pyd \u8868\u793a\u6587\u4ef6\u662f\u5728 Windows \u5e73\u53f0\u300164\u4f4d\u67b6\u6784\u4e0b\uff0c<code>python==3.9</code> \u73af\u5883\u4e2d\u7f16\u8bd1\u7684\u3002</p>"},{"location":"project_structure/","title":"\u9879\u76ee\u7ed3\u6784","text":"<p>Aerodrome \u7531 C++ \u548c Python \u4e24\u90e8\u5206\u7ec4\u6210\uff1b\u5176\u4e2d C++ \u51fd\u6570/\u7c7b\u9700\u8981\u5148\u901a\u8fc7 <code>pybind11</code> \u7f16\u8bd1\u4e3a <code>.pyd</code> \u6216 <code>.so</code> \u6587\u4ef6\uff0c\u518d\u88ab Python \u4ee3\u7801\u8c03\u7528\u3002</p> <pre><code>./Aerodrome\n\u251c\u2500docs                              # \u9879\u76ee\u6587\u6863\n\u251c\u2500examples                          # \u793a\u4f8b\n\u2502  \u251c\u2500AircraftControl       \n\u2502  \u2502  \u251c\u2500 StepResponse.py            # \u4f20\u7edf\u63a7\u5236\u548c\u5f3a\u5316\u5b66\u4e60\u63a7\u5236\u7684\u9636\u8dc3\u54cd\u5e94\u6bd4\u8f83\n\u2502  |  \u251c\u2500 WingedCone_Classic.py      # \u4f20\u7edf\u63a7\u5236\u65b9\u6cd5(\u76f4\u63a5\u8c03\u7528 C++ \u4ee3\u7801)\n\u2502  |  \u251c\u2500 WingedCone_PPO.py          # \u5f3a\u5316\u5b66\u4e60\u63a7\u5236(C++ \u4eff\u771f/ Python \u4ea4\u4e92\u73af\u5883)\n\u2502  |  \u2514\u2500 WingedCone_TimeCompare.py  # C++ \u548c Python \u4eff\u771f\u8fd0\u884c\u901f\u5ea6\u6bd4\u8f83\n\u2502  \u251c\u2500CartPole                       # DQN \u5b9e\u73b0\u7684 CartPole \u63a7\u5236\n\u2502  \u2514\u2500MinimalExample                 # \u6700\u7b80\u793a\u4f8b\u73af\u5883\n\u251c\u2500include\n\u2502  \u2514\u2500pybind11\n\u251c\u2500models                            # \u9884\u8bad\u7ec3\u6a21\u578b\n\u251c\u2500python                            # Python \u6e90\u7801\n\u2502  \u251c\u2500aerodrome \n\u2502  \u2502  \u251c\u2500envs                        # \u4ea4\u4e92\u73af\u5883\uff0c\u5904\u7406\u7528\u6237\u548cC++\u4eff\u771f\u4e4b\u95f4\u7684\u4fe1\u606f\u4ea4\u4e92\n\u2502  \u2502  \u2514\u2500simulator                   # \u7f16\u8bd1\u597d\u7684 C++ \u4ee3\u7801\u4f1a\u81ea\u52a8\u5b58\u653e\u5230\u6b64\u5904\n\u2502  \u2502      \u251c\u2500CanonicalAircraftEnv \n\u2502  \u2502      \u2502  \u251c\u2500envs                 # \u73af\u5883\u7c7b(\u901a\u5e38\u60c5\u51b5\u4e0b\u73af\u5883\u548c\u5b9e\u4f53\u662f\u4f5c\u4e3a\u4e0d\u540c\u7c7b\u7f16\u5199\u7684)\n\u2502  \u2502      \u2502  \u2514\u2500objects              # \u5b9e\u4f53\u7c7b\n\u2502  \u2502      \u251c\u2500CartPole\n\u2502  \u2502      \u2502  \u2514\u2500envs\n\u2502  \u2502      \u251c\u2500Core\n\u2502  \u2502      \u2502  \u251c\u2500envs\n\u2502  \u2502      \u2502  \u2514\u2500objects\n\u2502  \u2502      \u2514\u2500MinimalExample\n\u2502  \u2502          \u2514\u2500envs\n\u2502  \u2514\u2500aerodrome.egg-info\n\u2514\u2500src                              # C++ \u6e90\u7801\n   \u2514\u2500simulator\n       \u251c\u2500CanonicalAircraftEnv\n       \u2502  \u251c\u2500envs\n       \u2502  \u2514\u2500objects\n       \u251c\u2500CartPole\n       \u2502  \u251c\u2500envs\n       \u2502  \u2514\u2500objects\n       \u251c\u2500Core\n       \u2502  \u251c\u2500envs\n       \u2502  \u2514\u2500objects\n       \u2514\u2500MinimalExample\n           \u251c\u2500envs\n           \u2514\u2500objects\n</code></pre>"},{"location":"en/","title":"Aerodrome - Overview","text":"<p>Aerodrome is a lightweight library based on the joint programming of C++ and Python, focusing on providing high-performance dynamics simulation, Python interaction interfaces, and code examples for reinforcement learning and traditional control. It primarily targets two types of users: beginners in reinforcement learning research, or researchers who wish to apply reinforcement learning to specific fields (such as flight control) and need custom simulation environments. To ensure good modifiability and readability, every part of Aerodrome avoids the use of complex generic programming or advanced language features, and includes detailed comments in the code.</p> <p>The main contents and features of Aerodrome include:</p> <ul> <li> <p>Mimicking the code and interface style of Gym</p> </li> <li> <p>An example environment and a migrated version of Gym-CartPole for testing the correctness of reinforcement learning algorithms</p> </li> <li> <p>Highly customizable fixed-wing aircraft simulation example code</p> </li> <li> <p>A nonlinear aerodynamic model of the Winged-Cone based on publicly available data, along with its dynamics simulation (available in both C++ and Python, including performance comparisons!)</p> </li> <li> <p>Traditional three-loop autopilot implementation and Proximal Policy Optimization (PPO) implementation for longitudinal load control of the Winged-Cone</p> </li> </ul> <p>Note Aerodrome is not a modular library, therefore it is not suitable for import and use. Aerodrome sacrifices some code duplication to ensure that all code is concise, easy to understand, and convenient to extend. Aerodrome also has its limitations, such as the lack of visualization and experimental result saving functions; if you need specific reinforcement learning algorithm examples, you can refer to the CleanRL library; if you need to implement other aircraft models (or even environments in other fields), you can modify the Aerodrome code or rewrite it entirely!</p>"},{"location":"en/get_started/","title":"Install Aerodrome","text":"<p>1.Create and activate conda environment</p> <pre><code>$ conda create -n aerodrome python==3.9\n$ conda activate aerodrome\n</code></pre> <p>Aerodrome has been tested on <code>python&gt;=3.9.0,&lt;3.12</code>, but the binary files included in the source code (C++ compiled files under python/simulator) were generated in a <code>python==3.9</code> environment. If you intend to use a different Python version or your own custom environment, you will need to recompile the binaries and ensure that the Python versions used for compilation and runtime are consistent.</p> <p>2.Install Pytorch</p> <p>Running reinforcement learning code requires the use of the <code>torch</code> library; the source code has been tested on <code>torch==2.6.0</code>, but theoretically, it can run on any <code>torch&gt;1.0.0</code> and compatible CUDA versions. For example, <code>PyTorch 2.6.0</code> with <code>CUDA 11.8</code>:</p> <pre><code>$ pip install torch==2.6.0 --index-url https://download.pytorch.org/whl/cu118\n</code></pre> <p>3.Install Aerodrome from source</p> <pre><code>$ git clone https://github.com/CH4ACKO3/Aerodrome.git --recursive\n$ cd Aerodrome\n$ pip install .\n</code></pre> <p>4.Compiling the C++ Code (Optional)</p> <p>If you intend to use a custom environment or a Python version that differs from the one used to generate the binary files in the source code (<code>python==3.9</code>), you will need to recompile and install the code:</p> <pre><code>$ cmake -B build\n$ cmake --build build\n$ pip install .\n</code></pre> <p>The platform and Python version used during compilation will be reflected in the binary file names. For example, a file named *.cp39-win_amd64.pyd indicates that it was compiled on a Windows platform with a 64-bit architecture and in a <code>python==3.9</code> environment.</p>"},{"location":"en/project_structure/","title":"Project Structure","text":"<p>Aerodrome consists of both C++ and Python components. The C++ functions/classes need to be compiled into <code>.pyd</code> files using <code>pybind11</code> first, after which they can be called by the Python code.</p> <pre><code>./Aerodrome\n\u251c\u2500docs                              # Project Documentation\n\u251c\u2500examples                          # Examples\n\u2502  \u251c\u2500AircraftControl       \n\u2502  \u2502  \u251c\u2500 StepResponse.py            # Comparison of Step Response Between Traditional Control and Reinforcement Learning Control\n\u2502  |  \u251c\u2500 WingedCone_Classic.py      # Traditional Control Method (Directly Calling C++ Code)\n\u2502  |  \u251c\u2500 WingedCone_PPO.py          # Reinforcement Learning Control (C++ Simulation / Python Interaction Environment)\n\u2502  |  \u2514\u2500 WingedCone_TimeCompare.py  # Comparison of Simulation Execution Speed Between C++ and Python\n\u2502  \u251c\u2500CartPole                       # DQN Implementation for CartPole Control\n\u2502  \u2514\u2500MinimalExample                 # Minimal Example Environment\n\u251c\u2500include\n\u2502  \u2514\u2500pybind11\n\u251c\u2500models                            # Pre-trained Models\n\u251c\u2500python                            # Python Source Code\n\u2502  \u251c\u2500aerodrome \n\u2502  \u2502  \u251c\u2500envs                        # Interaction Environment, Handling Information Exchange Between User and C++ Simulation\n\u2502  \u2502  \u2514\u2500simulator                   # Compiled C++ Code Will Be Automatically Stored Here\n\u2502  \u2502      \u251c\u2500CanonicalAircraftEnv \n\u2502  \u2502      \u2502  \u251c\u2500envs                 # Environment Class (Typically, Environment and Entity Are Written as Separate Classes)\n\u2502  \u2502      \u2502  \u2514\u2500objects              # Entity Class\n\u2502  \u2502      \u251c\u2500CartPole\n\u2502  \u2502      \u2502  \u2514\u2500envs\n\u2502  \u2502      \u251c\u2500Core\n\u2502  \u2502      \u2502  \u251c\u2500envs\n\u2502  \u2502      \u2502  \u2514\u2500objects\n\u2502  \u2502      \u2514\u2500MinimalExample\n\u2502  \u2502          \u2514\u2500envs\n\u2502  \u2514\u2500aerodrome.egg-info\n\u2514\u2500src                              # C++ Source Code\n   \u2514\u2500simulator\n       \u251c\u2500CanonicalAircraftEnv\n       \u2502  \u251c\u2500envs\n       \u2502  \u2514\u2500objects\n       \u251c\u2500CartPole\n       \u2502  \u251c\u2500envs\n       \u2502  \u2514\u2500objects\n       \u251c\u2500Core\n       \u2502  \u251c\u2500envs\n       \u2502  \u2514\u2500objects\n       \u2514\u2500MinimalExample\n           \u251c\u2500envs\n           \u2514\u2500objects\n</code></pre>"}]}